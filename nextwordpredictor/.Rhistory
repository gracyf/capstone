0
info()
main()
info()
bye()
swirl()
main()
main()
lm(.,"swiss")
skip()
summary(all)
lm(Fertility ~ Agriculture,swiss)
summary(lm(Fertility ~ Agriculture, swiss))
skip()
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ .,swiss)
skip()
main()
6
dim(InsectSprays)
head(InsectSprays,n=15)
A
skip()
summary(InsectSprays$spray)
summary(InsectSprays[,2])
sapply(cols(InsectSprays),class)
skip()
skip()
summary(fit$coef)
summary(fit)$coef
skip()
skip()
mean(sprayB)
mean(sprayB)
skip()
nfit <- lm(count ~ spray -1,InsectSprays)
summary(nfit)
summary(nfit)$coef
skip()
skip()
summary(fit2)$coef
mean(sC)
skip()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
rm(list) = ls()
rm(list = ls()
)
library(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
swirl()
swirl()
swirl()
install.packages(car)
install.packages("car")
swirl()
swirl()
ravenData
skip()
skip()
skip()
summary(mdl)
conint(mdl)
skip()
anova(mdl)
qchisq(0.95, 1)
install.packages('car')
install.packages('car')
library(car)
install.packages("lme4")
library(car)
library(lme4)
install.packages("lme4")
install.packages("lme4")
library(lme4)
library(`lme4_1.1-14.zip`)
library(lme4)
library('car')
library(car)
install.packages('lme4')
install.packages('lme4')
library(car)
swirl()
skip()
rdp2()
skip()
skip()
skip()
vif(mdl)
skip()
vif(mdl2)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
nxt()
View(hits)
class(hits[,'date'])
skip()
as.integer(head(hits[,'date'])
)
skip()
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
skip()
skip()
skip()
skip()
install.packages("DDPQuiz3")
getMethod(createmean)
showMethods(createmean)
createmean
library(DDPQuiz3)
install.packages("swirlify")
load("C:/Users/Gracy/Downloads/courseraData.rda")
Country <- c("Australia", "China","India","United Kingdom","United States")
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,china,India,UK,US)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,china,India,UK,US)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,China,India,UK,US)
df
Year <- c(2008,2009,2010,2011,2012,2013,2014,2015)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Year,Australia,China,India,UK,US)
df
t(df)
gdp_df <- t(df)
gdp_df
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles)
df
head(airmiles)
airmiles
class(airmiles)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles,color=index)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type
="scatter")
head(EuStockMarkets)
str(EuStockMarkets)
ts_df <- as.ts(df)
ts_df
str(ts_df)
data("airmiles")
plot_ly(x = ~time(ts_df), y = ~ts_df,color=index)
df[1][1] <- "Country"
df
Year <- c(2008,2009,2010,2011,2012,2013,2014,2015)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Year,Australia,China,India,UK,US)
Year <- c(2008,2009,2010,2011,2012,2013,2014,2015)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Year,Australia,China,India,UK,US)
ts_df <- as.ts(df)
ts_df <- as.ts(df)
ts_df
plot_ly(ts_df, x= ~time, y=~ts_df, type="scatter")
plot_ly( x= ~time(ts_df), y=~ts_df, type="scatter")
str(airmiles)
plot_ly(ts_df, x= ~Year, y=~df, type="scatter")
plot_ly(df, x= ~Year, y=~df, type="scatter")
Year <- c(2008,2009,2010,2011,2012,2013,2014,2015)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Year,Australia)
df
df <- as.ts(df)
df
plot_ly(x = ~time(df), y= ~df, type="scatter")
plot_ly(x = ~time, y= ~df, type="scatter")
str(df)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type="scatter")
str(EuStockMarkets)
as.data.frame(EuStockMarkets)
head(as.data.frame(EuStockMarkets))
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,China,India,Uk,Us)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,China,India,UK,Us)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(Australia,China,India,UK,US)
tsdf <- as.ts(df)
tsdf
str(tsdf)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
India <- c(3.9, 8.5, 10.3, 6.6, 5.5, 6.4, 7.5, 8.0)
UK <- c(-0.5, -4.2 ,1.7 ,1.5 ,1.5 ,2.1 ,3.1 ,2.3)
US <- c(-0.3 ,-2.8, 2.6, 1.6,  2.2, 2.7, 2.4, 2.9)
df <- data.frame(c(2008,2009,2010,2011,2012,2013,2014,2015),Australia,China,India,UK,US)
ts_df <- as.ts(df)
ts_df
str(ts_df)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
myts <- ts(Australia, start = c(2008,1) , end = c(2015,12), frequency = 12)
myts
plot_ly(myts, x = ~time, y = ~myts, type="scatter")
plot_ly(as.data.frame(myts), x = ~time, y = ~myts, type="scatter")
plot_ly(x = ~time(myts), y = ~myts, type="scatter")
myts <- ts(Australia, start = c(2008) , end = c(2015), frequency = 7)
myts
plot_ly(x = ~time(myts), y = ~myts, type="scatter")
plot_ly(x = ~time(myts), y = ~myts, type="")
data("iris")
head(iris)
plot_ly(iris,x = ~Sepal.Length, y = ~Petal.Length, type="scatter")
plot_ly(iris,x = ~Sepal.Length, y = ~Petal.Length, type="scatter",color=Sepal.Width)
gdp <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
fertilityRate <- c(2.0,2.0,1.9,1.9,1.9,1.9,1.8,1.8)
time <- c(2008,2009,2010,2011,2012,2013,2014,2015)
plot_ly(x = ~gdp, y = ~fertilityRate, z =~time, type="scatterr3d", color=~gdp)
plot_ly(x = ~gdp, y = ~fertilityRate, z =~time, type="scatter3d", color=~gdp)
GDP_Australia <- c(3.7, 1.8, 2.0, 2.4, 3.6, 2.6, 2.6, 2.4)
GDP_China <- c(9.7, 9.4 ,10.6, 9.5, 7.9, 7.8, 7.3, 6.9)
time <- c(2008,2009,2010,2011,2012,2013,2014,2015)
plot_ly(x = ~GDP_Australia, y = ~GDP_China, z =~time, type="scatter3d", color=~time)
plot_ly(x = ~GDP_Australia, y = ~GDP_China, z =~time, type="pie", color=~time)
plot_ly(x = ~GDP_Australia, y = ~GDP_China, z =~time, type="scattermapbox", color=~time)
plot_ly(x = ~GDP_Australia, y = ~GDP_China, z =~time, type="candlestick", color=~time)
plot_ly(x = ~GDP_Australia, y = ~GDP_China, z =~time, type="scatter3d", color=~time)
plot_ly(x = ~GDP_Australia, y = ~time, type="scatter")
plot_ly(x = ~GDP_Australia, y = ~time, type="pie")
plot_ly(x = ~GDP_Australia, y = ~time, type="mesh3d")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2d")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour")
plot_ly(x = ~GDP_Australia, y = ~time, type="scatterternary")
plot_ly(x = ~GDP_Australia, y = ~time, type="pointcloud")
plot_ly(x = ~GDP_Australia, y = ~time, type="carpet")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2d")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout( title = " Australia's GDP Rate")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout( title = " Australia's GDP Rate ") %>% layout(title = now())
now()
date()
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout( title = " Australia's GDP Rate ") %>% layout(title = date())
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout( title = " Australia's GDP Rate , Created on : date())
)
))
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout(title = " Australia's GDP Rate , Created on : date()")
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout(title = paste("Australia's GDP Rate , Created on", date())
)
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
plot_ly(x = ~GDP_Australia, y = ~time, type="histogram2dcontour") %>% layout(title = "Australia's GDP Rate")
memory.limit()
memory.limit(size=70000)
library(doParallel)
parallelizeTask <- function(task, ...) {
# Calculate the number of cores
ncores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(ncores)
registerDoParallel(cl)
#print("Starting task")
r <- task(...)
#print("Task done")
stopCluster(cl)
r
}
# let sample.txt be the corpus
sampleFile <- parallelizeTask(readLines,"sample.txt")
shiny::runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
shiny::runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
runApp('C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor')
install.packages("Rcompression")
d <- "C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/data_1"
files <- list.files(d, recursive=TRUE)
ls()
d <- "C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/data_1/bi_score.csv"
d <- "C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/data_1/bi_score.csv"
system("gzip d")
?gzip
install.packages("R.utils")
library(R.utils)
getwd()
setwd("C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US")
gzip("./data_1/bi_score.csv")
print(file.info("bi_score.csv.gz"))
gunzip("foo.txt.gz")
gunzip("bi_score.csv.gz")
gunzip("./data_1/bi_score.csv.gz")
head(bi_score.csv)
library(R.utils)
gzip("./data_1/bi_score.csv")
print(file.info("./data_1/bi_score.csv.gz"))
r <- read.table("./data_1/bi_score.csv.gz", sep=","))
r <- read.table("./data_1/bi_score.csv.gz", sep=",")
head(r)
bi_score <- read.table("./data_1/bi_score.csv.gz", sep=",")
colnames(bi_score) <- c("bigram_w1","bigram_w2","next_word","freq","score")
colnames(bi_score) <- c("bigram_w1","next_word","freq","score")
head(bi_score)
setkeyv(bi_score, bigram_w1)
library(data.table)
setkeyv(bi_score, bigram_w1)
setkeyv(bi_score, "bigram_w1")
str(bi_score)
?read.table
f <- fread("./data_1/bi_score.csv.gz",sep=',',header = FALSE,data.table = TRUE, col.names = c("bigram_w1","next_word","freq","score"))
?readRDS
gzip("./data_1/uni_score.rds")
r <- readRDS("./data_1/uni_score.rds.gz")
gunzip("./data_1/uni_score.rds.gz")
r <- readRDS("./data_1/uni_score.rds")
class(r)
r1 <- as.data.table(r)
class(r1)
head(r1)
\
setkeyv(r1,"unigram_word")
key(r1)
r1["just"]
r1[r1$unigram_word == "just"]
res <- r1["just"]
gzip("./nextwordpredictor/unigram.rds")
gzip("./nextwordpredictor/bigram.rds")
gzip("./nextwordpredictor/trigram.rds")
gzip("./nextwordpredictor/fourgram.rds")
gzip("./nextwordpredictor/uni_score.rds")
gzip("./nextwordpredictor/bi_score.rds")
gzip("./nextwordpredictor/tri_score.rds")
gzip("./nextwordpredictor/four_score.rds")
runApp('nextwordpredictor')
uni_score <- as.data.table(readRDS("uni_score.rds.gz"))
setwd("C:/Users/Gracy/Coursera - Data Science Specialization/Course 10 - Capstone/Week 1/Coursera-SwiftKey/final/en_US/nextwordpredictor")
uni_score <- as.data.table(readRDS("uni_score.rds.gz"))
uni_sco
uni_score <- readRDS("uni_score.rds.gz")
bi_file <- readRDS("bigram.rds")
head(bi_file)
bi_file <- as.data.table(readRDS("bigram.rds"))
head(bi_file)
class(bi_file)
bi_file["hi"]
bi_file <- as.data.table(readRDS("bigram.rds"))
head(bi_file)
clasS(bi_file)
str(bi_file)
bi_file <- as.data.table(readRDS("bigram.rds"))
tri_file <- as.data.table(readRDS("trigram.rds"))
four_file <- as.data.table(readRDS("fourgram.rds"))
#colnames(uni_file) <- c("unigram_word","uni_freq")
colnames(bi_file) <- c("bigram_word1","bigram_word2","bi_freq")
colnames(tri_file) <- c("trigram_word1","trigram_word2","trigram_word3","tri_freq")
colnames(four_file) <- c("fourgram_word1","fourgram_word2","fourgram_word3","fourgram_word4","four_freq")
uni_score <- as.data.table(readRDS("uni_score.rds"))
bi_score <- as.data.table(readRDS("bi_score.rds"))
tri_score <- as.data.table(readRDS("tri_score.rds"))
four_score <- as.data.table(readRDS("four_score.rds"))
colnames(uni_score) <- c("unigram_word","uni_freq","score")
colnames(bi_score) <- c("bigram_word1","bigram_word2","bi_freq","score")
colnames(tri_score) <- c("trigram_word1","trigram_word2","trigram_word3","tri_freq","score")
colnames(four_score) <- c("fourgram_word1","fourgram_word2","fourgram_word3","fourgram_word4","four_freq","score")
str(bi_file)
str(tri_file)
str(four_file)
setkeyv(bi_file,"bigram_word1")
setkeyv(tri_file,"trigram_word1","trigram_word2")
setkeyv(four_file,"fourgram_word1","fourgram_word2","fourgram_word3")
?setkeyv
setkeyv(bi_file,"bigram_word1")
setkeyv(tri_file,c("trigram_word1","trigram_word2"))
setkeyv(four_file,c("fourgram_word1","fourgram_word2","fourgram_word3"))
head(uni_score)
head(bi_score)
head(tri_score)
head(four_score)
setkeyv(uni_score,"unigram_word")
setkeyv(bi_score,"bigram_word1")
setkeyv(tri_score,c("trigram_word1","trigram_word2"))
setkeyv(four_score,c("fourgram_word1","fourgram_word2","fourgram_word3"))
uni_score <- uni_score %>% arrange(desc(score))
head(uni_score)
uni_prediction <- uni_score[1:3,]
uni_prediction
query <- "hi how are you darling"
w <- str_split(query,' ')
prediction <- four_file[four_file$fourgram_word1 == w[[1]][1] & four_file$fourgram_word2 == w[[1]][2] & four_file$fourgram_word3 == w[[1]][3], ]
prediction
"hapy","mothers","day","moms",9
query <- "hapy mothers day"
w <- str_split(query,' ')
prediction <- four_file[four_file$fourgram_word1 == w[[1]][1] & four_file$fourgram_word2 == w[[1]][2] & four_file$fourgram_word3 == w[[1]][3], ]
prediction
prediction <- prediction %>% arrange(desc(four_freq))
prediction <- prediction[1:3,]
predicted_word <- as.character(prediction$fourgram_word4)
predicted_word
n <- nrow(prediction)
prediction <- prediction[1:n,]
predicted_word <- as.character(prediction$fourgram_word4)
predicted_word
runApp()
runApp()
four_file <- four_file %>% group_by(fourgram_word1,fourgram_word2,fourgram_word3,fourgram_word4) %>% summarise(sum(four_freq))
query <- "hapy mothers day"
w <- str_split(query,' ')
prediction <- four_file[four_file$fourgram_word1 == w[[1]][1] & four_file$fourgram_word2 == w[[1]][2] & four_file$fourgram_word3 == w[[1]][3], ]
prediction
colnames(four_file) <- c("fourgram_word1","fourgram_word2","fourgram_word3","fourgram_word4","four_freq")
prediction
prediction <- four_file[four_file$fourgram_word1 == w[[1]][1] & four_file$fourgram_word2 == w[[1]][2] & four_file$fourgram_word3 == w[[1]][3], ]
prediction
prediction <- prediction %>% arrange(desc(four_freq))
prediction <- prediction[1:3,]
predicted_word <- as.character(prediction$fourgram_word4)
predicted_word
runApp()
runApp()
runApp()
?fread
runApp()
runApp()
w <- as.character("just","like","me")
w
w <- as.character("just like me")
w
w1 <- str_split(w,' ')
w <- gsub(" ","   ", w)
w
w <- gsub(" ","    ", w)
w
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
